angular.module('bhima.controllers').controller('budgetController', function($scope, $q, $routeParams, connect, appstate, messenger) { 
    /////
    //  summary: 
    //    Controller behaviour for the budgeting unit, fetches displays and allows updates on data joined from 
    //    enterprise, account, fiscal year, period and budget
    //  TODO
    //    -Split budgeting unit into 3 or 4  controllers, one for each component
    //    -Memory in budgeting, fiscal years compared should be re-initialised, most used accounts, etc.
    /////
    
    var account = $routeParams.accountID || -1;
    
    //Rewrite using more concise model and initialisation - validation and appcache service
    var dirtyBudgets = [];
    var models = {};

    models['fiscal'] = {
      model: {},
      request: {
        'tables': { 
          'fiscal_year': {
            'columns': ["id", "fiscal_year_txt"]
          }
        }
      }
    };
 
    function init() { 

      appstate.register("enterprise", function(res) {
        createBudget(res.id);
      });

    }

    function createBudget(e_id) { 
      var account_model = {};
      var fiscal_model = {};
      var budget_model = {reports: []};

      var default_account_select;
  
      //FIXME promise / error chain
      var promise = fetchAccount(e_id);
      promise
      .then(function(model) { 
        account_model = model;
        if(account === -1) {
          default_account_select = account_model.data[0].id; //First account in list, could be loaded from cache (model.get(cache_id))
          messenger.push({type: 'info', msg: 'No account provided, selected default'});
        } else { 
          default_account_select = account;
        }

        //validate account exists 
        $scope.selected_account = account_model.get(default_account_select);
        if(!$scope.selected_account) throw new Error('Provided account does not exist');
        return fetchFiscal(e_id);
      })
      .then(function(model) { 
        fiscal_model = model;
        //set the first budget report - this will be populated in updateReport
        var default_fiscal = appstate.get("fiscal"); //Risky with validation checks

        if(!default_fiscal) throw new Error('Fiscal year not provided');
        budget_model.reports.push({id : default_fiscal.id, desc : default_fiscal.fiscal_year_txt, model :  {}});
        fiscal_model.remove(default_fiscal.id);
        return updateReport(default_account_select, budget_model.reports);
      })
      .then(function(model) { 
        //All models populated - expose to $scope
        $scope.account_model = account_model;
        $scope.fiscal_model = fiscal_model;
        //TODO: Util function to check if there are any fiscal years left
        //Default select
        $scope.selected_fiscal = $scope.fiscal_model.data[0];

        $scope.budget_model = budget_model;

        console.log(budget_model);
        //Model has already been populated by default
        setSelected(default_account_select); //optional/ can expose default to $scope, or wait for user selection
      }, function(err) { 
        messenger.push({type: 'danger', msg: 'Failed to generate budget report ' + err});  
      });
    }

    function fetchAccount(e_id) { 
      var deferred = $q.defer();
      var account_query = {
        'tables' : {
          'account' : {
            'columns' : ["id", "account_txt"]
            }
        },
        'where' : ['account.enterprise_id=' + e_id]
      };
      connect.req(account_query).then(function(model) {
        deferred.resolve(model);
      });
      return deferred.promise;
    }

    function fetchFiscal(e_id) { 
      /////
      // summary:  
      //  Create model with all fiscal years for budget comparison 
      // ~
      //  Fiscal year data for a given enterprise already exists in the outside application, this could either be used directly (very 
      //  specific example) or the data downloaded could be cached using the connect service (ref: connect, sockets)
      /////
      var fiscal_query = {
        'tables' : {
          'fiscal_year' : {
            'columns' : ["id", "fiscal_year_txt"]
          }
        },
        'where' : ['fiscal_year.enterprise_id=' + e_id]
      };
      var deferred = $q.defer();
      connect.req(fiscal_query).then(function(model) {
        deferred.resolve(model);
      });
      return deferred.promise;
    }

    //FIXME: seperate complete update from fetching individudal model (call populateModel() loopping through reports.length)
    // Models should not be updated or refreshed on a new comparison
    function updateReport(account_id, reports) { 
      var deferred = $q.defer();

      for(var i = 0, l = reports.length; i < l; i++) { 
        var y = reports[i];

        (function(i, y) { 
          fetchBudget(account_id, y.id).then(function(model) { 
            y.model = indexMonths(model);
            y.display = formatBudget(y.model);
            // console.log('display - ', y.display);
            // console.log("fetchBudget", i, l);
            if(i==l-1) { 
              // console.log("resolving", reports);
              deferred.resolve(reports);
            }
          });
        })(i, y);
      }
      return deferred.promise;
    }

    function populateModel() { 

    }
   
    function fetchBudget(account_id, fiscal_year) { 
      //FIXME: request object should be formed using connect API, or straight table downloaded etc - implementation decision
      var deferred = $q.defer();
      var budget_query = {
        tables : {
          'period' : { columns: ['period_start', 'period_stop'] },
          'budget' : { columns : ['id', 'account_id', 'period_id', 'budget'] }
        },
        join : ['period.id=budget.period_id'],
        where : ['budget.account_id='+account_id, 'AND', 'period.fiscal_year_id='+fiscal_year]
      };

      connect.req(budget_query).then(function(model) { 
        console.log("Retrieved model", model);
        deferred.resolve(model);
      });
      return deferred.promise;
    }

    function indexMonths(model) {
      //not ideal as it changes the model? can be updated 
      var month_index = {};
      var d = model.data;
      for(var i = d.length - 1; i >= 0; i--) {
          var month = (new Date(d[i].period_start).getMonth());
          month_index[month] = d[i].id;
      }
      model.month_index = month_index;
      return model;
    }

    function setSelected(account_id) { 
      //Selection has been successful - update $scope
      //Set account as selected
      $scope.selected_account = $scope.account_model.get(account_id);
      //Set flag for DOM, displaying the report
      $scope.active = "report";
    }

    function formatBudget(model) { 
      var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dev"];

      var format = [];
      for (var i = 0, c = months.length; i < c; i++) {
        var l = model.month_index[i];
        if(l) { 
          var data = model.get(l);
          //FIXME: repeated data in model and period
          data.actual = 0; //actual placeholder
          format.push(data);
          // console.log("format", data);
        } else { 
          format.push(null);
        }
      }
      console.log("f return", format);
      return format;
    }

    $scope.select = function(account_id) { 
      //see $scope.$evalAsync() - ng-init not updating      
      var promise = updateReport(account_id, $scope.budget_model.reports);
      promise
      .then(function(model) { 
        //Report models updated - expose to $scope
        $scope.budget_model.reports = model;
        setSelected(account_id);
      });      
    };

    $scope.filterMonth = function(report, index) {
      console.log("filterMonth request", report);
      console.log("month_index", report.model.month_index);
      console.log("index", index);
      if(report.model.month_index) {
      var l = report.model.month_index[index];
      if(l) { 
        return report.model.get(l);
      }
      }
    };

    /*This isn't optimal*/
    $scope.sum = function(report) { 
      //TODO: check if line.budget exists or something
      if(report.model.data) { 
        var total = 0;
        report.model.data.forEach(function(line) { 
          total += Number(line.budget);
        });
        return total;
      }
      return null;
    };

    $scope.compare = function() { 
      console.log("compare");
      $scope.budget_model.reports.push({id : $scope.selected_fiscal.id, desc : $scope.selected_fiscal.fiscal_year_txt, model : {}});
      $scope.select($scope.selected_account.id);
      console.log("cmp", $scope.selected_fiscal);
      $scope.fiscal_model.remove($scope.selected_fiscal.id);
      $scope.selected_fiscal = $scope.fiscal_model.data[0];
    };

    $scope.deleteCompare = function(report) { 
      var arr = $scope.budget_model.reports;
      arr.splice(arr.indexOf(report), 1);
      //update fiscal select
      //hard coded bad-ness
      $scope.fiscal_model.post({id : report.id, fiscal_year_txt : report.desc});
      $scope.selected_fiscal = $scope.fiscal_model.get(report.id);
    };

    $scope.validSelect = function() {
      //ugly
      if($scope.fiscal_model) { 
        if($scope.fiscal_model.data.length > 0) { 
          return false;
        } 
      }
      return true;
    };

    $scope.updateBudget = function updateBudget() { 
      var promiseList = [];

      //FIXME send all post(put) requests at once - requires server API update
      //FIXME on storing changed budgets, store model - can call get directly on model
      //make requests 
      $scope.budget_model.reports.forEach(function(report) { 
        report.model.data.forEach(function(budget_item) { 
          if(dirtyBudgets.indexOf(budget_item.period_id) >= 0) { 
            promiseList.push(connect.basicPost("budget", [{budget: budget_item.budget, id: budget_item.id}], ["id"]));    
          }
        });
      });
      
      //handle server response
      $q.all(promiseList).then(function(res) { 
        messenger.push({type: 'success', msg: 'Budget records updated'});
        dirtyBudgets.length = 0;
      }, function(err) { 
        messenger.push({type: 'danger', msg: 'Error updating budget records ' + err.status});  
      });
    };
 
    $scope.dirtyInput = function dirtyInput(row) { 
      var input_period = row.period_id; 
      console.log(dirtyBudgets, input_period, input_period in dirtyBudgets);
      if(dirtyBudgets.indexOf(input_period) < 0) dirtyBudgets.push(row.period_id);
    }


    init();
  });
