// reports_proposed/data/bilan.js
// Collects and aggregates data for the enterprise bilan

var q       = require('q');
var db      = require('../../../lib/db');
var numeral = require('numeral');

var formatDollar = '$0,0.00';
var variationExploitationDate = new Date();

// expose the http route
exports.compile = function (options) {
  'use strict';
  var i18VariationExploitation = options.language == 'fr' ? require('../lang/fr.json').VARIATION_EXPLOITATION : require('../lang/en.json').VARIATION_EXPLOITATION;
  var deferred = q.defer(), context = {}, infos = {};


  var sql = 
    'SELECT account.id, account.account_number, account.account_txt, account.parent, account.is_charge, account.account_type_id, SUM(period_total.debit) as debit, SUM(period_total.credit) as credit ' +
    'FROM account LEFT JOIN period_total on account.id = period_total.account_id WHERE account.account_type_id in (?,?) AND (period_total.fiscal_year_id in (?) OR ISNULL(period_total.fiscal_year_id)) ' +
    'AND account.id NOT IN (SELECT account.id FROM account WHERE account.account_type_id = ?) GROUP BY account.id';

  context.reportDate = variationExploitationDate.toDateString();
  context.enterpriseName = options.enterprise.abbr;

  db.exec(sql, [1, 3, options.fy, 2])
  .then(function (currentExploitation){
    console.log('current', currentExploitation);
    return db.exec(sql, [1, 3, options.pfy, 2]);
  })
  .then(function (previousExploitation){
    console.log('previousExploitation', previousExploitation);
    deferred.resolve(context);
  })
  .catch(deferred.reject)
  .done();

  return deferred.promise;
};


// var accountTree = getChildren(accounts, ROOT_ACCOUNT_ID, 0);


// function getChildren(accounts, parentId, depth) {
//   var children;
  
//   console.log('getChildren [', accounts.length, parentId, depth, ']');
//   // Base case: There are no child accounts
//   // Return an empty array
//   if (accounts.length === 0) { return []; }

//   // Returns all accounts where the parent is the
//   // parentId
//   children = accounts.filter(function (account) {
//     return account.parent === parentId;
//   });

//   // Recursively call get children on all child accounts
//   // and attach them as childen of their parent account
//   children.forEach(function (account) {
//     // console.log('children account', account.account_number);
//     account.depth = depth;
//     account.children = getChildren(accounts, account.account_number, depth+1);
//   });

//   return children;
// }
