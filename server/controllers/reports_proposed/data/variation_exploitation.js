var q       = require('q');
var db      = require('../../../lib/db');
var numeral = require('numeral');
var sanitize = require('../../../lib/sanitize');

var INCOME_EXPENSE_ACCOUNT_ID = 1, TITLE_ACCOUNT_ID = 3, ROOT_ACCOUNT_ID = 0, formatDollar = '$0,0.00';

exports.compile = function (options) {
  'use strict';

  var deferred = q.defer(), context = {}, sql1, sql_previous, sql_current, titleList, currents, previous;

  context.options = options;

  context.options.ignoredTransListCurrent = (context.options.ignoredTransListCurrent) ?
  'AND gl.trans_id NOT IN (' + 
    context.options.ignoredTransListCurrent.split(';')
    .map(function (item){ return sanitize.escape(item);}).join(',') + ')' : '';

  context.options.ignoredTransListPreview = (context.options.ignoredTransListPreview) ? 
  'AND gl.trans_id NOT IN (' +
   context.options.ignoredTransListPreview.split(';')
   .map(function (item){ return sanitize.escape(item);}).join(',') + ')' : '';

  context.i18n = options.language == 'fr' ? 
    require('../lang/fr.json').VARIATION_EXPLOITATION :
    require('../lang/en.json').VARIATION_EXPLOITATION;

  sql_previous = 
    'SELECT ac.id, ac.account_number, ac.account_txt, ac.parent, ac.is_charge, ' +
    '(CASE WHEN ac.is_charge = 1 THEN IFNULL(SUM(gl.debit_equiv - gl.credit_equiv), 0) ' + 
    'ELSE IFNULL(SUM(gl.credit_equiv - gl.debit_equiv), 0) END) AS balance ' +
    'FROM account ac LEFT JOIN general_ledger gl ON gl.account_id = ac.id ' + 
    'WHERE ac.is_ohada = 1 AND ac.account_type_id IN (?) AND ' + 
    'gl.fiscal_year_id IN (?) ' + context.options.ignoredTransListPreview + ' GROUP BY ac.id ORDER BY ac.account_number';

  sql_current = 
    'SELECT ac.id, ac.account_number, ac.account_txt, ac.parent, ac.is_charge, ' +
    '(CASE WHEN ac.is_charge = 1 THEN IFNULL(SUM(gl.debit_equiv - gl.credit_equiv), 0) ' + 
    'ELSE IFNULL(SUM(gl.credit_equiv - gl.debit_equiv), 0) END) AS balance ' +
    'FROM account ac LEFT JOIN general_ledger gl ON gl.account_id = ac.id ' + 
    'WHERE ac.is_ohada = 1 AND ac.account_type_id IN (?) AND ' + 
    'gl.fiscal_year_id IN (?) ' + context.options.ignoredTransListCurrent + ' GROUP BY ac.id ORDER BY ac.account_number';

  sql1 = 
    'SELECT ac.id, ac.account_number, ac.account_txt, ac.is_charge ' +
    'FROM account AS ac WHERE ac.is_ohada = 1 AND ac.account_type_id IN (?)';

  db.exec(sql1, [TITLE_ACCOUNT_ID])
  .then(function (res){
    titleList = res;
    return db.exec(sql_current, [INCOME_EXPENSE_ACCOUNT_ID, options.fy]);
  })
  .then(function (currentData){
    currents = currentData;
    return db.exec(sql_previous, [INCOME_EXPENSE_ACCOUNT_ID, options.pfy]);
  })
  .then(function (previousData){
    previous = previousData;

    //unify the previous and the current result
    var list = unifyList(currents, previous);

    //format the unified list
    context.data = format(list, titleList); 

    //FIX ME : The funtion getGeneralTotal can be called once for expense and income
    context.totalExpense = getGeneralTotal(context.data, 1);
    context.totalIncome = getGeneralTotal(context.data, 0);

    context.result = getResult(context.totalExpense, context.totalIncome);

    context.customResults = getCustomResults(context.data, context.result, options.deductableAccountGroup);

    deferred.resolve(context);
  })
  .catch(deferred.reject)
  .done();
  return deferred.promise;
};

//this function is formating the combined list into a printable format
function format(list, titleList){

  //declaring the list of processed parents id and processed parent with their children 
  var processedParents = [], data = [];

  list.forEach(function (item){

    //testing if the parent is already processed
    if(processedParents.indexOf(item.parent) === -1) {      

      //getting the full data of the parent
      var parent = titleList.filter(function (title){
        return title.id === item.parent;
      })[0];     


      //process the parent to get his children and is balance, previous balance ...
      parent = processParent(parent, list);

      //push the result in the data list
      data.push(parent);

      //store the parent id in the processed parent list to avoid processing twice the same parent
      processedParents.push(parent.id);      
    }
  });

  return data;
}

function processParent (parent, AccountList){
  var titleAccount = parent;
  var value = {balance_previous : 0,  balance : 0};

  titleAccount.children = AccountList.filter(function (item){
    return item.parent === parent.id;
  });

  titleAccount.is_charge = titleAccount.children[0].is_charge; //FIX ME : this operation seems not logic

  value = titleAccount.children.reduce(function (obj, account){
    obj.balance_previous += account.balance_previous;
    obj.balance += account.balance;
    return obj;
  }, value);

  titleAccount.balance = value.balance;
  titleAccount.balance_view = getNumeralFormat(titleAccount.balance);

  titleAccount.balance_previous = value.balance_previous;
  titleAccount.balance_previous_view = getNumeralFormat(titleAccount.balance_previous);

  titleAccount.variation = (titleAccount.balance - titleAccount.balance_previous).toFixed(2);
  titleAccount.percent = getPercent(titleAccount.variation, titleAccount.balance_previous);

  return titleAccount;
}

function unifyList (list1, list2){
  
  //iterate on previous list
  list2.forEach(function (item){

    var found = false;
    
    //searching for a match in current list
    for(var j = 0; j < list1.length - 1; j++){

      if( list1[j].id === item.id ){

        //defining the previous balance
        list1[j].balance_previous = item.balance;
        list1[j].balance_previous_view = getNumeralFormat(list1[j].balance_previous);

        list1[j].balance_view = getNumeralFormat(list1[j].balance);

        list1[j].variation = (list1[j].balance - list1[j].balance_previous).toFixed(2);
        list1[j].percent = getPercent(list1[j].variation, list1[j].balance_previous);

        found = true;
        list1[j].processed = found;

        //once a match, we stop the loop
        break;
      };
    };

    //if there is no match, we add it
    if(!found){
      item.balance_previous = item.balance;
      item.balance_previous_view = getNumeralFormat(item.balance_previous);

      item.balance = 0;
      item.balance_view = getNumeralFormat(item.balance);

      item.variation = (item.balance - item.balance_previous).toFixed(2);
      item.percent = getPercent(item.variation, item.balance_previous);

      item.processed = !found;

      list1.push(item);
    }
  });  

  //processing data, which are not in previous list
  list1.forEach(function (item){
    if(!item.processed) {      
      item.balance_previous = 0;
      item.balance_previous_view = getNumeralFormat(item.balance_previous);

      item.balance_view = getNumeralFormat(item.balance);

      item.variation = (item.balance - item.balance_previous).toFixed(2);
      item.percent = getPercent(item.variation, item.balance_previous);
      item.processed = true;
    };
  });

  return list1;
}

function getGeneralTotal (list, is_charge){
  var total = {};

  total = list.filter(function (item){ 
    if(item.is_charge !== null){
      return item.is_charge === is_charge; 
    }else{
      return item.children[0].is_charge === is_charge; 
    }
  })
  .reduce(function (x, y){ 
    x.balance += y.balance;
    x.balance_previous += y.balance_previous;
    return x;
  }, {balance : 0, balance_previous : 0});

  total.variation = (total.balance - total.balance_previous).toFixed(2);
  total.percent = getPercent(total.variation, total.balance_previous);
  total.balance_view = getNumeralFormat(total.balance.toFixed(2));
  total.balance_previous_view = getNumeralFormat(total.balance_previous.toFixed(2));

  return total;
}

function getResult (totalExpense, totalIncome){
  var result = {};

  result.balance = totalIncome.balance - totalExpense.balance;
  result.balance_previous = totalIncome.balance_previous - totalExpense.balance_previous;
  result.variation = (result.balance - result.balance_previous).toFixed(2);
  result.percent = getPercent(result.variation, result.balance_previous);
  result.balance_view = getNumeralFormat(result.balance.toFixed(2));
  result.balance_previous_view = getNumeralFormat(result.balance_previous.toFixed(2));

  return result;
}

function getCustomResults (data, result, deductableAccountGroup){

  var res = [];
  var list = deductableAccountGroup.split(';');

  list.forEach(function (item){
    var accountDetail = {balance : 0, balance_previous : 0};
    var element = {};
    var gr = item.split(',');

    element.label = item;

    gr.forEach(function (group){
      var accountGroup = data.filter(function (item) { return item.account_number == group; })[0];

      accountDetail.balance += accountGroup.balance;
      accountDetail.balance_previous += accountGroup.balance_previous;
    });

    element.balance = result.balance - accountDetail.balance;
    element.balance_previous = result.balance_previous - accountDetail.balance_previous;
    element.variation = (element.balance - element.balance_previous).toFixed(2);
    element.percent = getPercent(element.variation, element.balance_previous);
    element.balance_view = getNumeralFormat(element.balance.toFixed(2));
    element.balance_previous_view = getNumeralFormat(element.balance_previous.toFixed(2));
    res.push(element);    
  });

  return res;
}

function getNumeralFormat (nb){
  return numeral(nb || 0).format(formatDollar);
}

//calculate the percent of x in y
function getPercent(number, base){
  return (base === 0) ? null : ((number / base) * 100).toFixed(2);
}